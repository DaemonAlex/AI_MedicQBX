# QBox Migration Plan for AI Medic Script

## Phase 1: Framework Detection & Core Integration

### 1.1 Update Framework Detection
**Files to modify:** `utils_server.lua`, `utils_client.lua`

**Current Issue:**
```lua
if GetResourceState('qb-core') == 'started' then
    Utils.QBCore = exports['qb-core']:GetCoreObject()
```

**QBox Solution:**
```lua
-- Check for QBox framework
if GetResourceState('qbx_core') == 'started' then
    Utils.QBX = exports.qbx_core
    Utils.Framework = 'qbox'
elseif GetResourceState('qb-core') == 'started' then
    Utils.QBCore = exports['qb-core']:GetCoreObject()
    Utils.Framework = 'qbcore'
else
    Utils.Framework = 'standalone'
end
```

### 1.2 Player Data Access
**Current QBCore Method:**
```lua
local Player = QBCore.Functions.GetPlayerData()
local ply = QBCore.Functions.GetPlayer(id)
```

**QBox Method:**
```lua
local Player = exports.qbx_core:GetPlayer(source)
local playerData = Player.PlayerData
```

## Phase 2: Death State Detection

### 2.1 Update Death Checking Logic
**File:** `client.lua`

**Current Implementation:**
```lua
if Player.metadata['isdead'] or Player.metadata['inlaststand'] then
    isDowned = true
end
```

**QBox Compatible:**
```lua
-- QBox death state detection
if Utils.Framework == 'qbox' then
    local playerData = exports.qbx_core:GetPlayerData()
    if playerData.metadata.isdead or playerData.metadata.inlaststand then
        isDowned = true
    end
elseif Utils.Framework == 'qbcore' then
    -- Keep existing QBCore logic
    local Player = Utils.QBCore.Functions.GetPlayerData()
    if Player.metadata['isdead'] or Player.metadata['inlaststand'] then
        isDowned = true
    end
else
    -- Standalone fallback
    if IsEntityDead(playerPed) then
        isDowned = true
    end
end
```

## Phase 3: Job System Integration

### 3.1 EMS Job Detection
**File:** `server.lua`

**Current QBCore:**
```lua
if ply.PlayerData.job.name == "ambulance" then
    onlineEMS = onlineEMS + 1
end
```

**QBox Compatible:**
```lua
local function getOnlineEMSCount()
    local onlineEMS = 0
    
    if Utils.Framework == 'qbox' then
        local players = exports.qbx_core:GetQBPlayers()
        for _, player in pairs(players) do
            if player.PlayerData.job.name == "ambulance" and player.PlayerData.job.onduty then
                onlineEMS = onlineEMS + 1
            end
        end
    elseif Utils.Framework == 'qbcore' then
        for _, id in pairs(Utils.QBCore.Functions.GetPlayers()) do
            local ply = Utils.QBCore.Functions.GetPlayer(id)
            if ply and ply.PlayerData.job.name == "ambulance" then
                onlineEMS = onlineEMS + 1
            end
        end
    end
    
    return onlineEMS
end
```

## Phase 4: Money System Integration

### 4.1 Payment Processing
**File:** `utils_server.lua`

**Current QBCore:**
```lua
local success = player.Functions.RemoveMoney('bank', amount)
```

**QBox Compatible:**
```lua
function Utils.RemoveMoney(player, amount)
    if Utils.Framework == 'qbox' then
        local success = player.Functions.RemoveMoney('bank', amount, 'ai-medic-fee')
        print('[AI Medic] QBox money removal: $' .. amount .. ' - Success: ' .. tostring(success))
        return success
    elseif Utils.Framework == 'qbcore' then
        local success = player.Functions.RemoveMoney('bank', amount)
        print('[AI Medic] QBCore money removal: $' .. amount .. ' - Success: ' .. tostring(success))
        return success
    else
        print('[AI Medic] Money removal skipped (standalone mode)')
        return true -- Always succeed in standalone
    end
end
```

## Phase 5: Notification System

### 5.1 Unified Notification Handler
**Files:** `utils_server.lua`, `utils_client.lua`

**QBox Compatible Notifications:**
```lua
function Utils.Notify(src, msg, type)
    if Utils.Framework == 'qbox' then
        TriggerClientEvent('qbx_core:client:notify', src, {
            text = msg,
            type = type or 'primary'
        })
    elseif Utils.Framework == 'qbcore' then
        TriggerClientEvent('QBCore:Notify', src, msg, type or 'primary')
    else
        -- Standalone fallback
        TriggerClientEvent('chat:addMessage', src, {
            color = {255, 0, 0},
            multiline = true,
            args = {"EMS", msg}
        })
    end
end
```

## Phase 6: Revival System Integration

### 6.1 QBox Revival Events
**File:** `server.lua`

**Current:**
```lua
TriggerClientEvent('hospital:client:Revive', target)
```

**QBox Compatible:**
```lua
RegisterNetEvent('custom_aimedic:revivePlayer')
AddEventHandler('custom_aimedic:revivePlayer', function(target)
    print('[AI Medic] Revive requested for target: ' .. target)
    
    if Utils.Framework == 'qbox' then
        -- QBox revival method
        exports.qbx_medical:RevivePlayer(target, true)
    elseif Utils.Framework == 'qbcore' then
        -- QBCore revival method
        TriggerClientEvent('hospital:client:Revive', target)
    else
        -- Standalone revival
        TriggerClientEvent('custom_aimedic:standaloneRevive', target)
    end
end)
```

## Phase 7: Configuration Updates

### 7.1 Framework-Specific Config
**File:** `config.lua`

**Add QBox-specific settings:**
```lua
Config = {}

-- Framework Detection
Config.Framework = 'auto' -- 'auto', 'qbox', 'qbcore', 'standalone'

-- Models
Config.MedicModel = 's_m_m_paramedic_01'
Config.AmbulanceModel = 'ambulance'

-- Behavior
Config.ReviveDelay = 10000
Config.Fee = 500
Config.MaxEMSOnline = 5

-- Framework-specific job names
Config.EMSJobNames = {
    qbox = 'ambulance',
    qbcore = 'ambulance',
    standalone = nil
}

-- Hospital locations
Config.Hospitals = {
    city = vector3(308.24, -592.42, 43.28),
    sandy = vector3(1828.52, 3673.22, 34.28),
    paleto = vector3(-247.76, 6331.23, 32.43),
    default = vector3(293.0, -582.0, 43.0)
}
```

## Phase 8: Testing & Validation

### 8.1 Test Scenarios
1. **QBox Server Testing:**
   - Framework detection
   - Player death state recognition
   - EMS job checking
   - Money deduction
   - Revival functionality

2. **Backward Compatibility:**
   - Ensure QBCore still works
   - Standalone mode functions
   - No breaking changes

3. **Edge Cases:**
   - Multiple framework resources present
   - Missing framework resources
   - Invalid player data

## Phase 9: Implementation Priority

### High Priority (Critical for Basic Function)
1. Framework detection
2. Death state checking
3. Revival system integration

### Medium Priority (Important Features)
1. Money system integration
2. Job checking system
3. Notification system

### Low Priority (Nice to Have)
1. Enhanced error handling
2. Performance optimizations
3. Additional QBox-specific features

## Phase 10: Deployment Strategy

### 10.1 Rollout Plan
1. **Development Environment:** Test all changes
2. **Staging Server:** Validate with real QBox setup
3. **Production Deployment:** Gradual rollout with monitoring
4. **Fallback Plan:** Keep original QBCore version as backup

### 10.2 Documentation Updates
- Update README.md with QBox instructions
- Add troubleshooting section
- Include framework detection logs

## Additional Considerations

### Security Enhancements
- Add server-side validation for all client requests
- Implement rate limiting for medic calls
- Add permission checks for admin commands

### Performance Optimizations
- Implement entity pooling for ambulances/medics
- Add distance-based processing
- Optimize animation and model loading

### Future Enhancements
- Multi-language support
- Custom medical animations
- Integration with QBox medical items
- Real-time EMS dispatch system

## Files Requiring Modification

1. **utils_server.lua** - Framework detection, money system
2. **utils_client.lua** - Client-side framework detection, notifications
3. **server.lua** - Job checking, revival events, player management
4. **client.lua** - Death state detection, framework-specific logic
5. **config.lua** - Framework-specific configurations
6. **fxmanifest.lua** - Dependency updates if needed

## Estimated Timeline

- **Phase 1-3:** 2-3 hours (Core framework integration)
- **Phase 4-6:** 2-3 hours (System integration)
- **Phase 7-8:** 1-2 hours (Configuration and testing)
- **Phase 9-10:** 1-2 hours (Documentation and deployment)

**Total Estimated Time:** 6-10 hours for complete migration

This plan ensures your AI Medic script will work seamlessly with QBox while maintaining backward compatibility with QBCore and standalone modes.
